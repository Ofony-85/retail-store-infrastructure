name: 'Infrastructure CI/CD Pipeline'

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
    paths:
      - 'terraform/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  terraform-validate:
    name: 'Terraform Validate & Plan'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: terraform

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -out=tfplan
        echo "Plan completed successfully"
      continue-on-error: false

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: terraform/tfplan
        retention-days: 5

    - name: Comment Plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🔍 **Terraform Plan completed successfully!**\n\nInfrastructure changes are ready for review. Merge to deploy to the target environment.'
          });

  terraform-apply-develop:
    name: 'Deploy to Staging (Develop Branch)'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: terraform-validate
    environment: 
      name: staging
      url: ${{ steps.deploy.outputs.application_url }}
    
    defaults:
      run:
        working-directory: terraform

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      id: apply
      run: |
        terraform apply -auto-approve
        echo "Infrastructure deployment completed"

    - name: Configure kubectl
      id: deploy
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name $(terraform output -raw cluster_name)
        echo "Kubectl configured successfully"
        
        # Deploy application
        kubectl apply -f ../k8s/
        
        # Wait for deployment
        kubectl wait --for=condition=available --timeout=300s deployment --all -n retail-store
        
        # Get application URL
        LB_URL=$(kubectl get service ui -n retail-store -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "application_url=http://$LB_URL" >> $GITHUB_OUTPUT
        echo "Application deployed to: http://$LB_URL"

    - name: Post Deployment Summary
      run: |
        echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Cluster**: $(terraform output -raw cluster_name)" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: $(terraform output -raw region)" >> $GITHUB_STEP_SUMMARY
        echo "- **Application URL**: ${{ steps.deploy.outputs.application_url }}" >> $GITHUB_STEP_SUMMARY

  terraform-apply-production:
    name: 'Deploy to Production (Main Branch)'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: terraform-validate
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.application_url }}
    
    defaults:
      run:
        working-directory: terraform

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      id: apply
      run: |
        terraform apply -auto-approve
        echo "Production infrastructure deployment completed"

    - name: Configure kubectl and Deploy Application
      id: deploy
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name $(terraform output -raw cluster_name)
        
        # Deploy application
        kubectl apply -f ../k8s/
        
        # Wait for deployment
        kubectl wait --for=condition=available --timeout=300s deployment --all -n retail-store
        
        # Get application URL
        LB_URL=$(kubectl get service ui -n retail-store -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "application_url=http://$LB_URL" >> $GITHUB_OUTPUT

    - name: Save Deployment Outputs
      run: |
        terraform output -json > deployment-outputs.json
        echo "Developer Access Key: $(terraform output -raw developer_access_key_id)" >> deployment-info.txt
        echo "Kubeconfig Command: $(terraform output -raw kubeconfig_command)" >> deployment-info.txt

    - name: Upload Deployment Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: production-deployment
        path: |
          terraform/deployment-outputs.json
          terraform/deployment-info.txt

    - name: Post Production Deployment Summary
      run: |
        echo "## 🎉 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Cluster**: $(terraform output -raw cluster_name)" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: $(terraform output -raw region)" >> $GITHUB_STEP_SUMMARY
        echo "- **Application URL**: ${{ steps.deploy.outputs.application_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Developer Access Key**: $(terraform output -raw developer_access_key_id)" >> $GITHUB_STEP_SUMMARY